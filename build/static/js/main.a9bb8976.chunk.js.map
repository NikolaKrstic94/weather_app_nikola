{"version":3,"sources":["images.png","components/Header.js","components/MiniWeatherBox.js","components/WeatherDetails.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","handleChange","e","setState","city","target","value","trim","handleSubmit","makeApiCall","state","className","src","logo","alt","type","id","placeholder","onChange","this","onClick","Component","MiniWeatherBox","weather","date","Date","getDay","process","icon","temp","temp_min","temp_max","WeatherDetails","weather_main","Math","round","API_KEY","Main","updateState","data","name","lon","coord","lat","updateStateSecond","days","i","push","daily","day","timeConverter","dt","main","weather_desc","description","min","max","a","fetch","then","response","json","console","log","catch","err","alert","UNIX_timestamp","year","getFullYear","month","getMonth","getDate","getHours","getMinutes","getSeconds","MiniWeatherBoxes","weatherBoxes","slice","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a9bb8976.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/images.8149da86.png\";","import React, { Component } from 'react';\nimport './Header.css';\nimport logo from '../images.png';\n\nclass Header extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         city: '',\n      };\n   }\n   handleChange = (e) => {\n      this.setState({\n         city: e.target.value.trim(),\n      });\n   };\n   handleSubmit = (e) => {\n      this.props.makeApiCall(this.state.city);\n   };\n\n   render() {\n      return (\n         <div className='container'>\n            <div className=' col-12 py-4 header'>\n               <h1 className='col-12 header-title'>\n                  <img className='logo col-sm-2' src={logo} alt='logo' />\n                  Weather App\n               </h1>\n\n               <div className='py-2 search-wrapper col-md-8 mx-auto'>\n                  <input\n                     type='text'\n                     className='search form-control'\n                     id='location'\n                     aria-describedby=''\n                     placeholder='Enter City name'\n                     onChange={this.handleChange}\n                  />\n                  <button\n                     type='submit'\n                     onClick={this.handleSubmit}\n                     className='fa fa-search'\n                  />\n               </div>\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default Header;\n","import React from 'react';\n\nconst baseUrlImage = process.env.REACT_APP_baseUrlImage;\n\nconst getDay = (date) => {\n   let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n   return weekdays[new Date(date).getDay()];\n};\n\nconst MiniWeatherBox = (props) => {\n   if (props.weather) {\n      return (\n         <div className='col-sm-12'>\n            <h2>{getDay(props.weather.date)}</h2>\n            <h2>\n               <img\n                  src={baseUrlImage + props.weather.icon + '@2x.png'}\n                  alt='icon'\n               />\n               {props.weather.temp}°C\n            </h2>\n            <p>Min temp:{props.weather.temp_min}°C </p>\n            <p>Max temp:{props.weather.temp_max}°C</p>\n         </div>\n      );\n   } else {\n      return <div></div>;\n   }\n};\n\nexport default MiniWeatherBox;\n","import React from 'react';\nconst baseUrlImage = process.env.REACT_APP_baseUrlImage;\n\nconst WeatherDetails = (props) => {\n    if(props.weather){\n        return (\n            <div className=\"col-12 p-3\">\n                <div className=\"card col-12 col-md-6 mx-auto\">\n                    <div className=\"card-body\">\n                        <h2>\n                            Today in {props.city}\n                        </h2>\n                        <h2>\n                            <img src={baseUrlImage + props.weather.icon + '@4x.png'} alt=\"background\" />\n                            {props.weather.weather_main} : {Math.round(props.weather.temp)}&deg;C\n                        </h2>\n                        <ul>\n                            <li>Exact Temperature : {props.weather.temp }°C</li>\n                            <li>Min temp : {props.weather.temp_min}°C</li>\n                            <li>Max temp : {props.weather.temp_max}°C</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    else{\n        return (\n            <div>\n\n            </div>\n        );\n    }\n}\n\nexport default WeatherDetails;\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport MiniWeatherBox from './MiniWeatherBox';\nimport WeatherDetails from './WeatherDetails';\nimport './Main.css';\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nclass Main extends Component {\n   constructor(props) {\n      super(props);\n\n      this.state = {\n         city: '',\n         lon: '',\n         lat: '',\n         days: [],\n      };\n   }\n\n   updateState = (data) => {\n      this.setState({\n         city: data.city.name,\n         lon: data.city.coord.lon,\n         lat: data.city.coord.lat,\n      });\n   };\n\n   updateStateSecond = (data) => {\n      let days = [];\n      for (let i = 0; i < 5; i++) {\n         days.push({\n            temp: data.daily[i].temp.day,\n            date: this.timeConverter(data.daily[i].dt),\n            weather_main: data.daily[i].weather[0].main,\n            weather_desc: data.daily[i].weather[0].description,\n            temp_min: data.daily[i].temp.min,\n            temp_max: data.daily[i].temp.max,\n            icon: data.daily[i].weather[0].icon,\n         });\n      }\n\n      this.setState({\n         ...this.state,\n         days: days,\n      });\n   };\n\n   timeConverter(UNIX_timestamp) {\n      var a = new Date(UNIX_timestamp * 1000);\n      var months = [\n         'Jan',\n         'Feb',\n         'Mar',\n         'Apr',\n         'May',\n         'Jun',\n         'Jul',\n         'Aug',\n         'Sep',\n         'Oct',\n         'Nov',\n         'Dec',\n      ];\n      var year = a.getFullYear();\n      var month = months[a.getMonth()];\n      var date = a.getDate();\n      var hour = a.getHours();\n      var min = a.getMinutes();\n      var sec = a.getSeconds();\n      var time =\n         date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n      return time;\n   }\n\n   makeApiCall = async (city) => {\n      fetch(\n         `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&APPID=${API_KEY}`\n      )\n         .then((response) => response.json())\n         .then((response) => {\n            this.updateState(response);\n            console.log(response);\n\n            // drugi API call\n            fetch(\n               `https://api.openweathermap.org/data/2.5/onecall?lat=${response.city.coord.lat}&lon=${response.city.coord.lon}&exclude=hourly,minutely&units=metric&appid=${API_KEY}`\n            )\n               .then((response) => response.json())\n               .then((response) => {\n                  this.updateStateSecond(response);\n                  console.log(response);\n               })\n               .catch((err) => {\n                  console.log(err);\n                  return false;\n               });\n         })\n         .catch((err) => {\n            alert(\"You've entered an invalid city, click OK and try again\");\n            return false;\n         });\n\n\n   };\n\n   render() {\n      const MiniWeatherBoxes = () => {\n         const weatherBoxes = this.state.days.slice(1).map((day) => (\n            <li key={day.date} className='weather-box'>\n               <MiniWeatherBox weather={day} />\n            </li>\n         ));\n\n         return <ul className='weather-box-list'>{weatherBoxes}</ul>;\n      };\n\n      return (\n         <div className='container'>\n            <div className='main'>\n               <Header makeApiCall={this.makeApiCall} />\n               <WeatherDetails\n                  weather={this.state.days[0]}\n                  city={this.state.city}\n               />\n               <MiniWeatherBoxes />\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default Main;\n","import React from 'react';\nimport Main from './components/Main';\n\n\nfunction App() {\n   return <Main />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}